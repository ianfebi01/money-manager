name: Build and Deploy Next.js

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: NEXT_PUBLIC_GOOGLE_ANALYTICS

    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Debug SSH Connection
        run: ssh -vvv -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}

      - name: Check if private key exists
        run: ls -lah private_key.pem

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create .env.production file from secrets
        run: |
          cat <<EOF > .env.production
          NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }}

          POSTGRES_URL=${{ secrets.POSTGRES_URL }}
          POSTGRES_URL_NON_POOLING=${{ secrets.POSTGRES_URL_NON_POOLING }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}

          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}

          NODE_ENV=production
          EOF
      - name: Build Docker image
        run: |
          docker build -t money-manager:latest .
          docker image ls

      - name: Save Docker image as tar
        run: |
          docker save -o money-manager.tar money-manager:latest
          ls -lah money-manager.tar
      - name: List contents before SCP
        run: ls -lah

      - name: Upload app image & configs to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: "money-manager.tar"
          target: ~/tmp
          strip_components: 0
          rm: false  # Optional: keep local files after SCP
          debug: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: NEXT_PUBLIC_GOOGLE_ANALYTICS

    steps:
      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /tmp
            docker load -i money-manager.tar
            rm money-manager.tar
            mkdir -p ~/app/money-manager
            cp .env.production ~/app/money-manager/.env.production
            cd ~/app/money-manager
            docker compose --env-file .env.production down
            docker compose --env-file .env.production up -d --build
            rm -rf /tmp/money-manager.tar
            rm -rf /tmp/.env.production
